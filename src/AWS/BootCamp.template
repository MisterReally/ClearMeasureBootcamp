{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
   "AvailabilityZoneA": {
     "Description": "Availability Zone A",
     "Type": "AWS::EC2::AvailabilityZone::Name"
   },
   "AvailabilityZoneB": {
     "Description": "Availability Zone B",
     "Type": "AWS::EC2::AvailabilityZone::Name"
   },
   "EnvironmentType" : {
     "Description" : "Select an Environment Type. This will determine certain server configurations such as New Relic",
     "Default" : "DEV",
     "AllowedValues" : [ "DEV", "INT", "QA", "PERF", "UAT", "PROD"],
     "Type" : "String"
   },
   "EnvironmentName" : {
     "Description" : "Choose a unique name for the environment. This will be used to tag the environment for easier resource tracking",
     "Default" : "DEV",
     "Type" : "String"
   },
   "KeyName" : {
     "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance or retrieve an administrator password",
     "Type" : "String"
   },
   "AdminUser" : {
     "Description" : "User for the instance Administrator user account",
     "Type"        : "String",
     "Default"     : "cm_admin"
   },
   "AdminPassword" : {
     "Description" : "Password for the instance Administrator user account",
     "Type"        : "String"
   },
   "SQLAdminUser" : {
     "Description" : "User for the Administrator user account",
     "Type"        : "String",
     "Default"     : "cm_admin"
   },
   "SQLAdminPassword": {
     "Description" : "Password for the Administrator user account - Found in Octopus Deploy http://build.ls-api.com:7070/app#/library/variables/LibraryVariableSets-4",
     "Type"        : "String"
   },
   "RDSStorageSize" : {
     "Description" : "Size of RDS storage in GB (between 20 GB and 4096 GB).",
     "Type" : "String",
     "Default" : "20"
    },
    "RDSInstanceType" : {
     "Description" : "Type of RDS instance to launch.",
     "Type" : "String",
     "Default" : "db.t2.micro",
     "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.t2.medium" ],
     "ConstraintDescription" : "must be a valid EC2 instance type."
   },
   "NginxServerInstanceType" : {
     "Description" : "Type of EC2 instance to launch.",
     "Type" : "String",
     "Default" : "t2.small",
     "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large", "c4.large", "c4.2xlarge"],
     "ConstraintDescription" : "must be a valid EC2 instance type."
   },
   "WebServerInstanceType" : {
     "Description" : "Type of EC2 instance to launch.",
     "Type" : "String",
     "Default" : "t2.small",
     "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large", "c4.large", "c4.2xlarge"],
     "ConstraintDescription" : "must be a valid EC2 instance type."
   },
   "OctoServerApiKey" : {
      "Description" : "Your Octopus Server API Key",
      "Type" : "String"
    },
    "OctoServerThumbprint" : {
      "Description" : "Your Octopus Server Thumbprint",
      "Type" : "String"
    },
    "OctoServerEnvironmentName" : {
      "Description" : "The Octopus Deploy Environment the Server will join",
      "Type" : "String"
    },
    "OctoServerURL" : {
      "Description" : "Your Octopus Server URL",
      "Default" : "http://build.clear-measure.com:7070/",
      "Type" : "String"
    },
    "NewRelicLicenseKey" : {
      "Description" : "Your New Relic License Key",
      "Type" : "String"
    },
    "LogEntriesAPIKey" : {
      "Description" : "Your Log Entries API Key",
      "Type" : "String"
    },
    "LogEntriesGroupName" : {
      "Description" : "Your Log Entries License Key",
      "Type" : "String"
    }
  },
  "Resources": {
    "ApplicationVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- VPC" ]] }
          }
        ]
      }
    },
    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": { "Ref" : "AvailabilityZoneB" },
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Public Subnet B" ]] }
          }
        ]
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": { "Ref" : "AvailabilityZoneA" },
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Private Subnet A" ]] }
          }
        ]
      }
    },
    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Ref" : "AvailabilityZoneA" },
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Public Subnet A" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "PrivateSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": { "Ref" : "AvailabilityZoneB" },
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Private Subnet B" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "VPCInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- VPC IGW" ]] }
          }
        ]
      }
    },
    "VPCDHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- DHCP Options" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ],
        "DomainName": "ec2.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "DefaultNetworkACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Network ACL" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "PrivateSubnetARouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Private Subnet A Routing" ]] }
          }
        ]
      }
    },
    "PrivateSubnetBRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Private Subnet B Routing" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "PublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Public Subnet Routing" ]] }
          }
        ]
      }
    },
    "ExternalLoadBalancerToRevProxyServers": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetA"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "30",
          "Target": "HTTP:80/index.html",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "ExternalELBSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- BootCamp ELB" ]] }
          }
        ]
      }
    },
    "InternalLoadBalancerToWebServers": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme": "internal",
        "Subnets": [
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetA"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "30",
          "Target": "HTTP:80/index.html",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "InternalELBSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- BootCamp Internal ELB" ]] }
          }
        ]
      }
    },
    "NginxAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          { "Ref" : "AvailabilityZoneB" },
          { "Ref" : "AvailabilityZoneA" }
        ],
        "Cooldown": "300",
        "DesiredCapacity": "2",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "MaxSize": "10",
        "MinSize": "2",
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetA"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "NginxLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ExternalLoadBalancerToRevProxyServers"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Nginx Server" ]] },
            "PropagateAtLaunch": true
          }
        ],
        "TerminationPolicies": [
          "Default"
        ]
      }
    },
    "WebServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          { "Ref" : "AvailabilityZoneB" },
          { "Ref" : "AvailabilityZoneA" }
        ],
        "Cooldown": "300",
        "DesiredCapacity": "2",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "MaxSize": "10",
        "MinSize": "2",
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetA"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "WebServerLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {
            "Ref": "InternalLoadBalancerToWebServers"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Web Server" ]] },
            "PropagateAtLaunch": true
          }
        ],
        "TerminationPolicies": [
          "Default"
        ]
      }
    },
    "NginxLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": "ami-d05e75b8",
        "InstanceType": { "Ref": "NginxServerInstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": "bootcamp-config-role",
        "SecurityGroups": [
          {
            "Ref": "NginxSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
    		        "nginxConfig=$(cat <<EOF",
        				"server {",
        				"\tlisten 80;",
        				"\tserver_name *.ls-api.com;",
        				"\tlocation / {",
                "\tresolver 10.0.0.2 valid=10s;",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\tset \\$apiLoadbalancer \"http://",
                      {
                        "Fn::GetAtt" : [ "InternalLoadBalancerToWebServers" , "DNSName" ]
                      },
                      "\";\n"
                    ]
                  ]
                },
                "\tproxy_pass \\$apiLoadbalancer ;",
                "\tproxy_set_header Host    \\$host;",
                "\tproxy_set_header X-Real-IP     \\$remote_addr;",
                "\tproxy_set_header X-Forwarded-For     \\$proxy_add_x_forwarded_for;",
                "\tproxy_connect_timeout       600;",
                "\tproxy_send_timeout          600;",
                "\tproxy_read_timeout          600;",
                "\tsend_timeout                90;",
                "\tkeepalive_timeout           90;",
                "\tproxy_buffering     off;",
        				"\t}",
        				"}",
        				"EOF",
        				")",
                "sudo apt-get update -y",
                "sudo apt-get install awscli -y",
                "sudo apt-get install nginx -y",
                "echo -e \"$nginxConfig\" > /etc/nginx/conf.d/default.conf",
                "sudo service nginx restart",
                "aws s3 cp s3://cm-projectbootcamp/configs/nginx/ ~/InstallScripts --recursive"
            ]
            ]
          }
        }
      }
    },
    "WebServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": "ami-cd9339a6",
        "InstanceType": { "Ref": "WebServerInstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "<powershell>",
                "Set-ExecutionPolicy Unrestricted -Force",
                "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))",
                "$adminPassword = \"",{ "Ref" : "AdminPassword" },"\"",
                "$adminPassword = $adminPassword.Trim()",
                "$environmentType = \"",{ "Ref" : "EnvironmentType" },"\"",
                "$environmentType = $environment.Trim()",
                "$environmentName = \"",{ "Ref" : "EnvironmentName" },"\"",
                "$environmentName = $environmentName.Trim()",
                "$octoServerEnvironmentName = \"",{ "Ref" : "OctoServerEnvironmentName" },"\"",
                "$octoServerEnvironmentName = $octoServerEnvironmentName.Trim()",
                "$octoServerUrl = \"",{ "Ref" : "OctoServerURL" },"\"",
                "$octoServerUrl = $octoServerUrl.Trim()",
                "$octoServerApiKey = \"",{ "Ref" : "OctoServerApiKey" },"\"",
                "$octoServerApiKey = $octoServerApiKey.Trim()",
                "$octoServerThumbprint = \"",{ "Ref" : "OctoServerThumbprint" },"\"",
                "$octoServerThumbprint = $octoServerThumbprint.Trim()",
                "$newRelicLicenseKey = \"",{ "Ref" : "NewRelicLicenseKey" },"\"",
                "$newRelicLicenseKey = $newRelicLicenseKey.Trim()",
                "$logEntriesAPIKey = \"",{ "Ref" : "LogEntriesAPIKey" },"\"",
                "$logEntriesAPIKey = $logEntriesAPIKey.Trim()",
                "$logEntriesGroupName = \"",{ "Ref" : "LogEntriesGroupName" },"\"",
                "$logEntriesGroupName = $logEntriesGroupName.Trim()",
                "([adsi](\"WinNT://$env:COMPUTERNAME/administrator, user\")).psbase.invoke('SetPassword', $adminPassword)",
                "[Environment]::SetEnvironmentVariable(\"NEWRELIC_KEY\", $newRelicLicenseKey , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"LOGENTRIES_GROUP\", $logEntriesGroupName , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"LOGENTRIES_KEY\", $logEntriesAPIKey , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"ENVIRONMENT_TYPE\", $environment , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_ENV\", $octoServerEnvironmentName , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_URL\", $octoServerUrl , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_APIKEY\", $octoServerApiKey , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_THUMBPRINT\", $octoServerThumbprint , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_VERSION\", $apiVersion , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_PROJECT\", \"LightSail Api\" , \"Machine\")",
                "[Environment]::SetEnvironmentVariable(\"OCTOSERVER_ROLE\", \"API-Server\" , \"Machine\")",
                "# Copy-S3Object",
                "cinst web-server-role -packageParameters \"/AdminUser:$adminUser /AdminPassword:$adminPassword\" -y -source 'C:\\InstallPackages'" ,
                "</powershell>","\n"
            ]
            ]
          }
        },
        "IamInstanceProfile": "bootcamp-config-role",
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 30
            }
          },
          {
            "DeviceName": "xvdb",
            "Ebs": {
              "VolumeSize": 30
            }
          }
        ]
      }
    },
    "NATInstanceB": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-303b1458",
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- NAT Instance B" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetB"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.3.79",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "NATSecurityGroup"
              }
            ]
          }
        ]
      }
    },
    "NATInstanceA": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-303b1458",
        "InstanceType": "t2.micro",
        "KeyName": { "Ref": "KeyName" },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- NAT Instance A" ]] }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetA"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.244",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "NATSecurityGroup"
              }
            ]
          }
        ]
      }
    },
    "WebServerBDataVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": { "Ref" : "AvailabilityZoneB" },
        "Size": "30",
        "VolumeType": "gp2"
      }
    },
    "WebServerADataVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": { "Ref" : "AvailabilityZoneA" },
        "Size": "30",
        "VolumeType": "gp2"
      }
    },
    "RDSSQLServer": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": { "Ref" : "RDSStorageSize" },
        "AllowMajorVersionUpgrade": "false",
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": { "Ref" : "RDSInstanceType" },
        "Port": "1433",
        "PubliclyAccessible": "true",
        "StorageType": "gp2",
        "BackupRetentionPeriod": "7",
        "MasterUsername": { "Ref" : "SQLAdminUser" },
        "MasterUserPassword": { "Ref" : "SQLAdminPassword" },
        "PreferredBackupWindow": "05:08-05:38",
        "PreferredMaintenanceWindow": "sun:08:13-sun:08:43",
        "Engine": "sqlserver-ex",
        "EngineVersion": "11.00.5058.0.v1",
        "LicenseModel": "license-included",
        "DBSubnetGroupName": {
          "Ref": "RDSSubnetGroup"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ]
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "RDS Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnetA"
          },
          {
            "Ref": "PrivateSubnetB"
          }
        ]
      }
    },
    "NginxSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "NginxSecurityGroup",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Nginx Security Group" ]] }
          }
        ]
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Passes traffic from private subnets to the NAT instances",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- NAT Security Group" ]] }
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Created from the RDS Management Console",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- RDS Security Group" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "InternalELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Internal Security Group match web site",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Internal ELB Security Group" ]] }
          }
        ]
      }
    },
    "DefaultSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "default VPC security group",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Default Security Group" ]] }
          },
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          }
        ]
      }
    },
    "ExternalELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Should match ports open to Nginx",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- External ELB Security Group" ]] }
          }
        ]
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "WebServerSecurityGroup",
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": { "Ref" : "EnvironmentName" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [{ "Ref" : "EnvironmentName" }, "- Web Server Security Group" ]] }
          }
        ]
      }
    },
    "NginxScalingDecreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment" : 1,
        "AutoScalingGroupName": {
          "Ref": "NginxAutoScalingGroup"
        }
      }
    },
    "WebServerScalingIncreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment" : 2,
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoScalingGroup"
        }
      }
    },
    "NginxAutoScalingGroupLowNetworkInAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "NetworkIn",
        "Namespace": "AWS/EC2",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "8000000.0",
        "AlarmActions": [
          {
            "Ref": "NginxScalingDecreaseGroupSize"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "NginxAutoScalingGroup"
          }
        ]
      }
    },
    "WebServerAutoScalingGroupCPUUtilizationAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": "80.0",
        "AlarmActions": [
          {
            "Ref": "WebServerScalingIncreaseGroupSize"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "WebServerAutoScalingGroup"
          }
        ]
      }
    },
    "WebServerAutoScalingGroupLowCPUUtilizationAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": "25.0",
        "AlarmActions": [
          {
            "Ref": "NginxScalingDecreaseGroupSize"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "WebServerAutoScalingGroup"
          }
        ]
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        }
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        },
        "SubnetId": {
          "Ref": "PublicSubnetB"
        }
      }
    },
    "subnetacl4": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "DefaultNetworkACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        }
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "InternetGatewayId": {
          "Ref": "VPCInternetGateway"
        }
      }
    },
    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetARouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        }
      }
    },
    "subnetroute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetBRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        }
      }
    },
    "subnetroute4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetB"
        }
      }
    },
    "subnetroute5": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateSubnetARouteTable"
        },
        "InstanceId": {
          "Ref": "NATInstanceA"
        }
      }
    },
    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateSubnetBRouteTable"
        },
        "InstanceId": {
          "Ref": "NATInstanceB"
        }
      }
    },
    "route3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "GatewayId": {
          "Ref": "VPCInternetGateway"
        }
      },
      "DependsOn": "gw1"
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "ApplicationVPC"
        },
        "DhcpOptionsId": {
          "Ref": "VPCDHCPOptions"
        }
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NginxSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "ExternalELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": "611364622323"
      }
    },
    "ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NginxSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "66.162.93.230/32"
      }
    },
    "ingress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NginxSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "SourceSecurityGroupId": {
          "Ref": "ExternalELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": "611364622323"
      }
    },
    "ingress4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NATSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "66.162.93.230/32"
      }
    },
    "ingress5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NATSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "10.0.2.0/24"
      }
    },
    "ingress6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "NATSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "10.0.4.0/24"
      }
    },
    "ingress7": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "RDSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "1433",
        "ToPort": "1433",
        "CidrIp": "66.162.93.230/32"
      }
    },
    "ingress8": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "InternalELBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress9": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "DefaultSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "DefaultSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": "611364622323"
      }
    },
    "ingress10": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ExternalELBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress11": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ExternalELBSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress12": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "WebServerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "InternalELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": "611364622323"
      }
    },
    "ingress13": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "WebServerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "3389",
        "ToPort": "3389",
        "CidrIp": "66.162.93.230/32"
      }
    },
    "ingress14": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "WebServerSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "SourceSecurityGroupId": {
          "Ref": "InternalELBSecurityGroup"
        },
        "SourceSecurityGroupOwnerId": "611364622323"
      }
    },
    "egress1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "NginxSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress2": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "NATSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress3": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "RDSSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress4": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "InternalELBSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress5": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "DefaultSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress6": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "ExternalELBSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress7": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "WebServerSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Description": "Project BootCamp",
  "Outputs": {
    "ExternalLoadBalancerToRevProxyServersName": {
      "Value": {
        "Ref": "ExternalLoadBalancerToRevProxyServers"
      }
    },
    "ExternalLoadBalancerToRevProxyServersDNS": {
      "Value": {
        "Fn::GetAtt": [
          "ExternalLoadBalancerToRevProxyServers",
          "DNSName"
        ]
      }
    },
    "RDSSQLServerName": {
      "Value": {
        "Ref": "RDSSQLServer"
      }
    },
    "RDSSQLServerEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "RDSSQLServer",
          "Endpoint.Address"
        ]
      }
    },
    "RDSSQLServerPort": {
      "Value": {
        "Fn::GetAtt": [
          "RDSSQLServer",
          "Endpoint.Port"
        ]
      }
    },
    "RDSSQLServerConnect": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "jdbc:mysql://",
            {
              "Fn::GetAtt": [
                "RDSSQLServer",
                "Endpoint.Address"
              ]
            },
            ":",
            {
              "Fn::GetAtt": [
                "RDSSQLServer",
                "Endpoint.Port"
              ]
            },
            "/",
            "MyDatabase"
          ]
        ]
      }
    },
    "RDSSubnetGroupName": {
      "Value": {
        "Ref": "RDSSubnetGroup"
      }
    }
  }
}
